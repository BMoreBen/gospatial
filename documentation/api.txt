Api
==========================

.. contents:: `Table of contents`
   :depth: 3
   :local:
   

Routes
-------------------------------



``GET /api/v1/layers``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Returns json containing customers datasources.

Params:
    - apikey = <apikey>

Request:
    GET ``<server>:<port>/api/v1/layers?apikey=<apikey>``

Returns::

    {
        "apikey": "TIJ3ZzsIWG8k",
        "datasources": [
            "b3db766e432842398ea1e9364acb5ad6"
        ]
    }




``POST /api/v1/layer``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Creates a new datasource layer and returns datasource uuid.

Params:
    - apikey = <apikey>

Request:
    POST ``<server>:<port>/api/v1/layer?apikey=<apikey>``

Returns::

    {
        'datasource': 'b2e10ca0d3bf466d90a427671ad00f37', 
        'status': 'ok'
    }



``GET /api/v1/layer/{ds}``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns GeoJSON for requested datasource layer.

Params:
    - apikey = <apikey>

Request:
    GET ``<server>:<port>/api/v1/layer/{ds}?apikey=<apikey>``

Returns::

    {
        "type": "FeatureCollection",
        "features": [
            {
                "type": "Feature",
                "geometry": {
                    "coordinates": [10,-10],
                    "type": "Point"
                },
                "properties": {
                    "name": "Our House"
                }
            },
            {
                "type": "Feature",
                "geometry": {
                    "coordinates": [
                        [-101.01,-100.01],
                        [100.01,101.01],
                        [-110.1,-10.1],
                    ],
                    "type": "LineString"
                },
                "properties": {
                    "name": "Middle of the Street"
                }
            }
        ]
    }



``DELETE /api/v1/layer/{ds}``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Deletes a datasource layer and removes it from customer.

Params:
    - apikey = <apikey>

Request:
    DELETE ``<server>:<port>/api/v1/layer/{ds}?apikey=<apikey>``

Returns::

    {
        "status":"ok",
        "datasource":"8665c8ee0cc44b56848acfb55302e3a9", 
        "result":"datasource deleted"
    }



``POST /api/v1/layer/{ds}/feature``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Adds GeoJSON feature to datasource layer.

Params:
    - apikey = <apikey>

Body::

    {
        "geometry": {
            "type": "Point",
            "coordinates": [0, 0],
        },
        "properties": {
            "name": "Center"
        }
    }

Request:
    POST ``<server>:<port>/api/v1/layer/3d5e751d85324cec84919e1e9a4c4f25/feature?apikey=<apikey>``

Returns::

    {
        'geometry': {
            'coordinates': [0, 0],
            'type': 'Point'
        }, 
        'type': 'Feature', 
        'properties': {
            'name': 'Center'
        }
    }



``GET /api/v1/layer/{ds}/feature/{k}``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Returns GeoJSON of requested feature.

Params:
    - apikey = <apikey>

Request:
    GET ``<server>:<port>/api/v1/layer/{ds}/feature/{k}?apikey=<apikey>``

Returns::

    {
        'geometry': {
            'coordinates': [0, 0],
            'type': 'Point'
        }, 
        'type': 'Feature', 
        'properties': {
            'name': 'Center'
        }
    }














``PUT /api/v1/layer/feature``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
``PUT`` request, requires ``apikey``, ``uuid``, ``geom``, and ``k`` parameters. This route allows a user to change ``geom`` to an existing feature.

Params::

    geom = [[lng,lat],...,[lng,lat]],
    apikey = <apikey>,
    uuid = <layer_uuid>,
    k = <feature_k>

Returns a JSON containing layer uuid::

    {
        "status": 200, 
        "layer": "kr7lwogusfhh", 
        "k": "kr7lwogusfhh:87", 
        "message": "feature editted", 
        "success": true
    }



``DELETE /api/v1/layer/feature``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
``DELETE`` request, requires ``apikey``, ``uuid``, and ``k`` parameters.

Params::

    apikey = <apikey>,
    uuid = <layer_uuid>,
    k = <feature_uuid>

Returns a JSON containing layer uuid::

    {
        "status": 200, 
        "k": "kr7lwogusfhh:87", 
        "message": "feature deleted", 
        "success": true
    }

